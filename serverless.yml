service: serverless-flask

frameworkVersion: "2"

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-basic-authentication
custom:
  tableName: "fav-companies-table-${self:provider.stage}"
  wsgi:
    app: app.app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: "20201221"
  stage: api
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"] }
    - Effect: Allow
      Action:
        - apigateway:GET
      Resource: "*"
  apiGateway:
    apiKeys:
      - admin
  environment:
    FAVOURITE_COMPANIES_TABLE: ${self:custom.tableName}

functions:
  app:
    handler: wsgi_handler.handler
    events:
      - http: "ANY /{proxy+}"
  getUsers:
    handler: wsgi_handler.handler
    events:
      - http:
          path: /favourite_companies
          method: get
          private: true
  getUser:
    handler: wsgi_handler.handler
    events:
      - http:
          path: /favourite_company/{proxy+}
          method: get
          private: true
  createUser:
    handler: wsgi_handler.handler
    events:
      - http:
          path: /favourite_company/create
          method: post
          private: true
  deleteUser:
    handler: wsgi_handler.handler
    events:
      - http:
          path: /favourite_company/delete/{proxy+}
          method: delete
          private: true

resources:
  Resources:
    UsersDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: org_id
            AttributeType: S
          - AttributeName: favourite_org_id
            AttributeType: S
        KeySchema:
          - AttributeName: org_id
            KeyType: HASH
          - AttributeName: favourite_org_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    GatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.WWW-Authenticate: "'Basic'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
