service: serverless-flask

frameworkVersion: "2"

plugins:
  - serverless-python-requirements
  - serverless-wsgi

custom:
  tableName: "fav-companies-table-${self:provider.stage}"
  wsgi:
    app: app.app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: "20201221"
  stage: api
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"] }
  environment:
    FAVOURITE_COMPANIES_TABLE: ${self:custom.tableName}

functions:
  app:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: "ANY /{proxy+}"
  getUsers:
    handler: wsgi_handler.handler
    events:
      - http: "GET /favourite_companies"
  getUser:
    handler: wsgi_handler.handler
    events:
      - http: "GET /favourite_company/{proxy+}"
  createUser:
    handler: wsgi_handler.handler
    events:
      - http: "POST /favourite_company/create"
  deleteUser:
    handler: wsgi_handler.handler
    events:
      - http: "DELETE /favourite_company/delete/{proxy+}"

resources:
  Resources:
    UsersDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: org_id
            AttributeType: S
          - AttributeName: favourite_org_id
            AttributeType: S
        KeySchema:
          - AttributeName: org_id
            KeyType: HASH
          - AttributeName: favourite_org_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
